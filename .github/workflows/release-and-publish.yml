# 1.2. Creating a Pipeline with a Trigger
# Pipeline name
name: Create release and publish NuGet

# Trigger condition. In this case it is a commit into the remote master branch
on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

# Jobs will be added here according to the requirements...
jobs:
  # 1.3. Adding the Package Build Job
  # Unique job identifier that can be used as a reference
  create_nuget:
    # User-friendly job name for the UI purposes
    name: Create NuGet
    # Environment definition. Each job is executed in a separate, isolated environment
    runs-on: ubuntu-24.04
    # Save path to the NuGet directory in the environment variable
    env:
      NuGetDirectory: ${{ github.workspace }}/nuget
    # List of commands to be run sequentially
    steps:
      # Checkout on a branch commit to access the source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      # Build and pack package
      - name: Pack
        shell: pwsh
        run: dotnet pack .\GCDS.NetTemplate\GCDS.NetTemplate --configuration Release --output ${{ env.NuGetDirectory }}

      # Uploading an artifact to the repository for access from other jobs
      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg

  # 1.4. Adding the Package Publishing Job
  deploy:
    name: Deploy NuGet
    runs-on: ubuntu-24.04
    # A ready artifact is required before publishing
    # The job waits for the create_nuget job to complete
    needs: create_nuget
    # This jobs runs if create_nuget succeeds
    if: success()
    # Save path to the NuGet directory in the environment variable
    env:
      NuGetDirectory: ${{ github.workspace }}/nuget
    steps:
      # Download the contents of the repository
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      # Publish the NuGet package using the dotnet utility
      - name: Publish NuGet package
        shell: pwsh
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }